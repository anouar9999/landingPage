const fs = require('fs');
const path = require('path');

// Chemins relatifs √† la racine du projet
const PUBLIC_DIR = path.join(__dirname, '../public');
const VIDEOS_DIR = path.join(PUBLIC_DIR, 'videos');

// Noms de fichiers attendus
const EXPECTED_VIDEOS = ['hero-1.mp4', 'hero-2.mp4', 'hero-3.mp4'];

console.log('üîç V√©rification des vid√©os pour le Hero...');

// V√©rifier si le dossier public existe
if (!fs.existsSync(PUBLIC_DIR)) {
  console.log('‚ùå Le dossier public n\'existe pas!');
  console.log(`   Chemin recherch√©: ${PUBLIC_DIR}`);
  console.log('   Cr√©ation du dossier public...');
  try {
    fs.mkdirSync(PUBLIC_DIR);
    console.log('‚úÖ Dossier public cr√©√© avec succ√®s!');
  } catch (err) {
    console.error('‚ùå Erreur lors de la cr√©ation du dossier public:', err);
    process.exit(1);
  }
}

// V√©rifier si le dossier videos existe
if (!fs.existsSync(VIDEOS_DIR)) {
  console.log('‚ùå Le dossier videos n\'existe pas!');
  console.log(`   Chemin recherch√©: ${VIDEOS_DIR}`);
  console.log('   Cr√©ation du dossier videos...');
  try {
    fs.mkdirSync(VIDEOS_DIR);
    console.log('‚úÖ Dossier videos cr√©√© avec succ√®s!');
  } catch (err) {
    console.error('‚ùå Erreur lors de la cr√©ation du dossier videos:', err);
    process.exit(1);
  }
}

// V√©rifier les vid√©os
let missingVideos = [];
let existingVideos = [];

EXPECTED_VIDEOS.forEach(videoFile => {
  const videoPath = path.join(VIDEOS_DIR, videoFile);
  if (fs.existsSync(videoPath)) {
    existingVideos.push(videoFile);
    const stats = fs.statSync(videoPath);
    const fileSizeInMB = stats.size / (1024 * 1024);
    console.log(`‚úÖ La vid√©o ${videoFile} existe (${fileSizeInMB.toFixed(2)} MB)`);
  } else {
    missingVideos.push(videoFile);
    console.log(`‚ùå La vid√©o ${videoFile} est MANQUANTE!`);
  }
});

// R√©sum√©
console.log('\nüìä R√âSUM√â:');
console.log(`   - ${existingVideos.length} vid√©os trouv√©es`);
console.log(`   - ${missingVideos.length} vid√©os manquantes`);

if (missingVideos.length > 0) {
  console.log('\n‚ö†Ô∏è ATTENTION: Des vid√©os sont manquantes!\n');
  console.log('Pour que le Hero fonctionne correctement, veuillez:');
  console.log('1. Placer les fichiers vid√©o suivants dans le dossier public/videos:');
  missingVideos.forEach(video => {
    console.log(`   - ${video}`);
  });
  console.log('\n2. Ou modifier le composant Hero.jsx pour utiliser des vid√©os alternatives.');
  console.log('\nVous pouvez aussi tester les vid√©os dans le navigateur:');
  console.log('- Lancez le serveur de d√©veloppement avec "npm start"');
  console.log('- Acc√©dez √† http://localhost:3000/test-video.html');
} else {
  console.log('\n‚úÖ PARFAIT! Toutes les vid√©os sont pr√©sentes.');
  console.log('Le composant Hero devrait fonctionner correctement.');
  console.log('\nVous pouvez tester les vid√©os dans le navigateur:');
  console.log('- Lancez le serveur de d√©veloppement avec "npm start"');
  console.log('- Acc√©dez √† http://localhost:3000/test-video.html');
}

// V√©rifier si le dossier de scripts existe
const SCRIPTS_DIR = path.dirname(__dirname);
if (fs.existsSync(SCRIPTS_DIR)) {
  console.log('\n‚ú® Scripts trouv√©s dans:', SCRIPTS_DIR);
}

// Afficher les chemins absolus pour aider au d√©bogage
console.log('\nüîç INFORMATIONS DE CHEMIN:');
console.log(`R√©pertoire de travail actuel: ${process.cwd()}`);
console.log(`Chemin absolu du dossier public: ${PUBLIC_DIR}`);
console.log(`Chemin absolu du dossier videos: ${VIDEOS_DIR}`);

console.log('\nüí° CONSEIL: Si vous avez des probl√®mes avec les chemins de fichiers,');
console.log('             assurez-vous d\'ex√©cuter ce script depuis la racine du projet.'); 